from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards import (
    get_admin_main_keyboard, 
    get_price_update_keyboard, 
    get_menu_settings_keyboard, 
    get_confirmation_keyboard, 
    get_back_keyboard, 
    get_static_items_keyboard,
    get_channel_menu_keyboard
)
from database import Database
from config import ADMIN_IDS, CHANNEL_ID

# Initialize router
router = Router()

# States for admin actions
class AdminStates(StatesGroup):
    waiting_for_price_url = State()
    waiting_for_static_url = State()
    waiting_for_confirmation = State()


# Middleware to check admin permissions
@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    user_id = event.from_user.id
    
    if user_id not in ADMIN_IDS:
        if isinstance(event, Message):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        elif isinstance(event, CallbackQuery):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    return await handler(event, data)


# Command handlers
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Handle /admin command to show admin panel."""
    await message.answer(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_admin_main_keyboard()
    )


# Callback query handlers
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    """Handle back button to return to admin panel."""
    await callback.message.edit_text(
        "üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_admin_main_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "publish_menu")
async def publish_menu(callback: CallbackQuery):
    """Handle menu publication request."""
    db = Database()
    
    # Get all menu items
    menu_items = await db.get_menu_items()
    
    if not menu_items:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ú–µ–Ω—é –ø—É—Å—Ç–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é.",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    # Update dynamic price URLs
    menu_items = [dict(item) for item in menu_items]  # Convert all rows to dicts first
    for item in menu_items:
        if item['is_dynamic']:
            price_post = await db.get_price_post(item['id'])
            if price_post:
                # Convert price_post to dict before accessing it
                price_post_dict = dict(price_post)
                item['url'] = price_post_dict['post_url']
    
    # Generate preview text
    preview_text = "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é</b>\n\n"
    
    # Add price items
    price_items = [item for item in menu_items if item['type'] == 'price']
    if price_items:
        for item in price_items:
            url_status = "‚úÖ URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if item['url'] else "‚ùå URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            preview_text += f"‚Ä¢ {item['title']} - {url_status}\n"
    
    preview_text += "\n<i>–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</i>\n\n"
    preview_text += "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª?"
    
    await callback.message.edit_text(
        preview_text,
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_publish")
async def confirm_publish(callback: CallbackQuery, state: FSMContext):
    """Handle confirmation of menu publication."""
    db = Database()
    
    try:
        # Get all menu items
        menu_items = await db.get_menu_items()
        
        # Update dynamic price URLs
        menu_items = [dict(item) for item in menu_items]  # Convert all rows to dicts first
        for item in menu_items:
            if item['is_dynamic']:
                price_post = await db.get_price_post(item['id'])
                if price_post:
                    # Convert price_post to dict before accessing it
                    price_post_dict = dict(price_post)
                    item['url'] = price_post_dict['post_url']
        
        # Generate menu text
        menu_text = "üõçÔ∏è <b>–ê–ö–¢–£–ê–õ–¨–ù–´–ï –¶–ï–ù–´</b> üõçÔ∏è\n\n"
        menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
        
        # Create inline keyboard
        keyboard = await get_channel_menu_keyboard(menu_items)
        
        # Get existing menu config
        config = await db.get_menu_config()
        
        # Send or edit message in channel
        bot = callback.bot
        
        if config and config['menu_message_id']:
            try:
                # Try to edit existing message
                message = await bot.edit_message_text(
                    chat_id=config['channel_id'] or CHANNEL_ID,
                    message_id=config['menu_message_id'],
                    text=menu_text,
                    reply_markup=keyboard
                )
                is_new = False
            except Exception:
                # If edit fails, send new message
                message = await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=menu_text,
                    reply_markup=keyboard
                )
                is_new = True
        else:
            # Send new message
            message = await bot.send_message(
                chat_id=CHANNEL_ID,
                text=menu_text,
                reply_markup=keyboard
            )
            is_new = True
        
        # Pin message if needed
        is_pinned = config['is_pinned'] if config else True
        if is_pinned and is_new:
            await bot.pin_chat_message(
                chat_id=CHANNEL_ID,
                message_id=message.message_id,
                disable_notification=True
            )
        
        # Update config in database
        await db.update_menu_config(
            message_id=message.message_id,
            channel_id=CHANNEL_ID,
            is_pinned=is_pinned
        )
        
        # Notify admin
        await callback.message.edit_text(
            "‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ú–µ–Ω—é {'–æ–±–Ω–æ–≤–ª–µ–Ω–æ' if not is_new else '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'} –≤ –∫–∞–Ω–∞–ª–µ "
            f"–∏ {'–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' if is_pinned else '–Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ'}.",
            reply_markup=get_back_keyboard()
        )
    
    except Exception as e:
        # Handle errors
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–Ω—é</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "update_prices")
async def update_prices(callback: CallbackQuery):
    """Handle price update request."""
    await callback.message.edit_text(
        "üí∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_price_update_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("update_price:"))
async def select_price_to_update(callback: CallbackQuery, state: FSMContext):
    """Handle selection of price list to update."""
    price_type = callback.data.split(":")[1]
    
    # Map price type to database item
    price_type_map = {
        "new_iphone": ("üì± –ü—Ä–∞–π—Å –Ω–∞ –ù–û–í–´–ï iPhone üì±", 1),
        "used_iphone": ("üì± –ü—Ä–∞–π—Å –Ω–∞ –ë/–£ iPhone üì±", 2),
        "airpods_watch": ("üéß –ü—Ä–∞–π—Å –Ω–∞ AirPods –∏ Apple Watch ‚åö", 3)
    }
    
    title, position = price_type_map.get(price_type, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–π—Å", 0))
    
    # Store the selected price type in state
    await state.update_data(price_type=price_type, position=position, title=title)
    
    # Set state to waiting for URL
    await state.set_state(AdminStates.waiting_for_price_url)
    
    # Get current URL if exists
    db = Database()
    menu_items = await db.get_menu_items(dynamic_only=True)
    
    current_url = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    for item in menu_items:
        if item['title'] == title:
            price_post = await db.get_price_post(item['id'])
            if price_post and price_post['post_url']:
                current_url = price_post['post_url']
            break
    
    await callback.message.edit_text(
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω: <b>{title}</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: <code>{current_url}</code>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º.\n"
        f"–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>https://t.me/channel/123</code>",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.message(AdminStates.waiting_for_price_url)
async def process_price_url(message: Message, state: FSMContext):
    """Process the price URL provided by admin."""
    url = message.text.strip()
    
    # Basic URL validation
    if not (url.startswith('https://t.me/') or url.startswith('http://t.me/')):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>https://t.me/channel/123</code>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # Get data from state
    data = await state.get_data()
    title = data.get('title')
    
    # Show confirmation
    await message.answer(
        f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
        f"–ü—Ä–∞–π—Å-–ª–∏—Å—Ç: <b>{title}</b>\n"
        f"–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: <code>{url}</code>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:",
        reply_markup=get_confirmation_keyboard("update_url")
    )
    
    # Update state with URL
    await state.update_data(url=url)
    await state.set_state(AdminStates.waiting_for_confirmation)


@router.callback_query(AdminStates.waiting_for_confirmation, F.data == "confirm_update_url")
async def confirm_update_url(callback: CallbackQuery, state: FSMContext):
    """Handle confirmation of price URL update."""
    # Get data from state
    data = await state.get_data()
    title = data.get('title')
    url = data.get('url')
    
    db = Database()
    
    try:
        # Find the menu item by title
        menu_items = await db.get_menu_items(dynamic_only=True)
        item_id = None
        
        for item in menu_items:
            if item['title'] == title:
                item_id = item['id']
                break
        
        if not item_id:
            # Item not found, create it
            item_id = await db.add_menu_item(
                type='price',
                title=title,
                url=None,
                position=data.get('position', 0),
                is_dynamic=True
            )
        
        # Update price post
        await db.update_price_post(item_id, url)
        
        # Clear state
        await state.clear()
        
        # Show success message
        await callback.message.edit_text(
            "‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ü—Ä–∞–π—Å-–ª–∏—Å—Ç <b>{title}</b> –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.",
            reply_markup=get_admin_main_keyboard()
        )
    
    except Exception as e:
        # Handle errors
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "menu_settings")
async def menu_settings(callback: CallbackQuery):
    """Handle menu settings request."""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_pin")
async def toggle_pin(callback: CallbackQuery):
    """Handle pin/unpin toggle request."""
    db = Database()
    config = await db.get_menu_config()
    
    if not config or not config['menu_message_id']:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ú–µ–Ω—é –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    # Toggle pin status
    new_pin_status = not config['is_pinned']
    
    try:
        bot = callback.bot
        
        if new_pin_status:
            # Pin message
            await bot.pin_chat_message(
                chat_id=config['channel_id'] or CHANNEL_ID,
                message_id=config['menu_message_id'],
                disable_notification=True
            )
            pin_text = "–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ"
        else:
            # Unpin message
            await bot.unpin_chat_message(
                chat_id=config['channel_id'] or CHANNEL_ID,
                message_id=config['menu_message_id']
            )
            pin_text = "–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ"
        
        # Update config in database
        await db.update_menu_config(
            message_id=config['menu_message_id'],
            channel_id=config['channel_id'] or CHANNEL_ID,
            is_pinned=new_pin_status
        )
        
        # Show success message
        await callback.message.edit_text(
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ú–µ–Ω—é {pin_text} –≤ –∫–∞–Ω–∞–ª–µ.",
            reply_markup=get_menu_settings_keyboard()
        )
    
    except Exception as e:
        # Handle errors
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "refresh_menu")
async def refresh_menu(callback: CallbackQuery):
    """Handle menu refresh request."""
    await callback.message.edit_text(
        "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ?",
        reply_markup=get_confirmation_keyboard("publish")
    )
    await callback.answer()


@router.callback_query(F.data == "static_items")
async def static_items(callback: CallbackQuery):
    """Handle static items management request."""
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é (—Ç–∏–ø 'info')
    menu_items = await db.get_menu_items()
    static_items = [dict(item) for item in menu_items if item['type'] == 'info']
    
    if not static_items:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ URL:\n"
        "‚úÖ - URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
        "‚ùå - URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        reply_markup=get_static_items_keyboard(static_items)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("update_static:"))
async def select_static_to_update(callback: CallbackQuery, state: FSMContext):
    """Handle selection of static item to update."""
    item_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é
    db = Database()
    item = await db.get_menu_item(item_id)
    
    if not item:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ü—É–Ω–∫—Ç –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_keyboard()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(item_id=item_id, title=item['title'])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL
    await state.set_state(AdminStates.waiting_for_static_url)
    
    current_url = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if not item['url'] else item['url']
    
    await callback.message.edit_text(
        f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω: <b>{item['title']}</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: <code>{current_url}</code>\n\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ.\n"
        f"–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>https://t.me/channel/123</code>\n\n"
        f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è URL –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '—É–¥–∞–ª–∏—Ç—å'",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.message(AdminStates.waiting_for_static_url)
async def process_static_url(message: Message, state: FSMContext):
    """Process the static item URL provided by admin."""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å URL
    if url.lower() in ["—É–¥–∞–ª–∏—Ç—å", "delete", "remove", "clear"]:
        url = ""
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    elif not (url.startswith('https://t.me/') or url.startswith('http://t.me/')):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>https://t.me/channel/123</code>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—É–¥–∞–ª–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è URL.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    title = data.get('title')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if url:
        confirm_text = (
            f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"–ü—É–Ω–∫—Ç –º–µ–Ω—é: <b>{title}</b>\n"
            f"–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: <code>{url}</code>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:"
        )
    else:
        confirm_text = (
            f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è URL</b>\n\n"
            f"–ü—É–Ω–∫—Ç –º–µ–Ω—é: <b>{title}</b>\n"
            f"URL –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:"
        )
    
    await message.answer(
        confirm_text,
        reply_markup=get_confirmation_keyboard("update_static_url")
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å URL
    await state.update_data(url=url)
    await state.set_state(AdminStates.waiting_for_confirmation)


@router.callback_query(AdminStates.waiting_for_confirmation, F.data == "confirm_update_static_url")
async def confirm_update_static_url(callback: CallbackQuery, state: FSMContext):
    """Handle confirmation of static item URL update."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    item_id = data.get('item_id')
    title = data.get('title')
    url = data.get('url')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    success = await db.update_menu_item(item_id, url=url)
    
    if success:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if url:
            success_text = (
                f"‚úÖ <b>URL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"–ü—É–Ω–∫—Ç –º–µ–Ω—é: <b>{title}</b>\n"
                f"–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: <code>{url}</code>"
            )
        else:
            success_text = (
                f"‚úÖ <b>URL —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–ü—É–Ω–∫—Ç –º–µ–Ω—é: <b>{title}</b>"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤
        menu_items = await db.get_menu_items()
        static_items = [dict(item) for item in menu_items if item['type'] == 'info']
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_static_items_keyboard(static_items)
        )
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å URL –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é.",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "statistics")
async def show_statistics(callback: CallbackQuery):
    """Handle statistics request."""
    db = Database()
    
    try:
        # Get menu config
        config = await db.get_menu_config()
        
        # Get menu items count
        menu_items = await db.get_menu_items()
        dynamic_items = [item for item in menu_items if item['is_dynamic']]
        
        # Prepare statistics text
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        if config and config['menu_message_id']:
            stats_text += f"‚Ä¢ –ú–µ–Ω—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ: ‚úÖ\n"
            stats_text += f"‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{config['menu_message_id']}</code>\n"
            stats_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {'‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' if config['is_pinned'] else '‚ùå –ù–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ'}\n"
        else:
            stats_text += "‚Ä¢ –ú–µ–Ω—é –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ: ‚ùå\n"
        
        stats_text += f"\n‚Ä¢ –í—Å–µ–≥–æ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é: {len(menu_items)}\n"
        stats_text += f"‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤: {len(dynamic_items)}\n"
        
        # Add dynamic items status
        if dynamic_items:
            stats_text += "\n<b>–°—Ç–∞—Ç—É—Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤:</b>\n"
            
            for item in dynamic_items:
                price_post = await db.get_price_post(item['id'])
                url_status = "‚úÖ" if price_post and price_post['post_url'] else "‚ùå"
                stats_text += f"‚Ä¢ {item['title']}: {url_status}\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_keyboard()
        )
    
    except Exception as e:
        # Handle errors
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """Handle cancellation of any action."""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()
